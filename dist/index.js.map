{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/timespan.ts","webpack:///./src/number.ts","webpack:///./src/index.ts","webpack:///./src/datetime.ts","webpack:///./src/array.ts"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","TimeSpan","[object Object]","days","hours","minutes","seconds","milliseconds","totalMilliSeconds","MaxMilliSeconds","MinMilliSeconds","this","_ticks","TicksPerMillisecond","ticks","Math","floor","TicksPerDay","TicksPerHour","TicksPerMinute","TicksPerSecond","totalDays","DaysPerTick","totalHours","HoursPerTick","totalMinutes","MinutesPerTick","totalSeconds","SecondsPerTick","totalMilliseconds","temp","MillisecondsPerTick","hour","minute","second","MaxSeconds","MinSeconds","ts","addTicks","result","MinValue","abs","scale","millis","Number","MAX_VALUE","MIN_VALUE","MillisPerSecond","MillisPerMinute","MillisPerHour","MillisPerDay","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","TicksPerTenthSecond","Zero","MaxValue","default","pad","length","String","datetime_1","DateTime","timespan_1","DayOfWeek","year","month","day","millisecond","DateToTicks","Date","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","TimeToTicks","MinTicks","MaxTicks","dateData","internalTicks","getDatePart","DatePartYear","DatePartMonth","DatePartDay","dayOfYear","DatePartDayOfYear","dayOfWeek","IsLeapYear","DaysToMonth366","DaysToMonth365","y","MaxMillis","add","months","datePart","getAllDatePart","DaysInMonth","addMonths","part","GetDatePart","y400","DaysPer400Years","y100","DaysPer100Years","y4","DaysPer4Years","y1","DaysPerYear","valueTicks","abbrev","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday","format","hour24","hour12","designator","monthName","weekdayName","indexOf","final","current","slice","next","formatChars","filter","f","string","endQuotePos","toPrimitive","hint","toString","DaysTo1601","DaysTo1899","DaysTo1970","DaysTo10000","Array","groupBy","reduce","prev","x","existing","push"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/**\n * @module TimeSpan\n */\n\n/**\n * Represents a time interval.\n */\nexport default class TimeSpan {\n    public static readonly TicksPerMillisecond = 10000;\n    private static readonly MillisecondsPerTick = 1.0 / TimeSpan.TicksPerMillisecond;\n\n    public static readonly TicksPerSecond = TimeSpan.TicksPerMillisecond * 1000;   // 10,000,000\n    private static readonly SecondsPerTick = 1.0 / TimeSpan.TicksPerSecond;        // 0.0001\n\n    public static readonly TicksPerMinute = TimeSpan.TicksPerSecond * 60;          // 600,000,000\n    private static readonly MinutesPerTick = 1.0 / TimeSpan.TicksPerMinute;        // 1.6666666666667e-9\n\n    public static readonly TicksPerHour = TimeSpan.TicksPerMinute * 60;            // 36,000,000,000\n    private static readonly HoursPerTick = 1.0 / TimeSpan.TicksPerHour;            // 2.77777777777777778e-11\n\n    public static readonly TicksPerDay = TimeSpan.TicksPerHour * 24;               // 864,000,000,000\n    private static readonly DaysPerTick = 1.0 / TimeSpan.TicksPerDay;              // 1.1574074074074074074e-12\n\n    private static readonly MillisPerSecond = 1000;\n    private static readonly MillisPerMinute = TimeSpan.MillisPerSecond * 60;       //     60,000\n    private static readonly MillisPerHour = TimeSpan.MillisPerMinute * 60;         //  3,600,000\n    private static readonly MillisPerDay = TimeSpan.MillisPerHour * 24;            // 86,400,000\n\n    static readonly MaxSeconds = Number.MAX_SAFE_INTEGER / TimeSpan.TicksPerSecond;\n    static readonly MinSeconds = Number.MIN_SAFE_INTEGER / TimeSpan.TicksPerSecond;\n\n    static readonly MaxMilliSeconds = Number.MAX_VALUE / TimeSpan.TicksPerMillisecond;\n    static readonly MinMilliSeconds = Number.MIN_VALUE / TimeSpan.TicksPerMillisecond;\n\n    static readonly TicksPerTenthSecond = TimeSpan.TicksPerMillisecond * 100;\n\n    public static readonly Zero: TimeSpan = new TimeSpan(0);\n\n    public static readonly MaxValue: TimeSpan = new TimeSpan(Number.MAX_VALUE);\n    public static readonly MinValue: TimeSpan = new TimeSpan(Number.MIN_VALUE);\n\n    // internal so that DateTime doesn't have to call an extra get\n    // method for some arithmetic operations.\n    private _ticks: number;\n\n    /**\n     * Gets the number of ticks that represent the value of \n     * he current TimeSpan.\n     */\n    get ticks(): number {\n        return this._ticks\n    }\n\n    /**\n     * Gets the days component of the time interval represented \n     * by the current TimeSpan structure.\n     */\n    get days() {\n        return Math.floor(this._ticks / TimeSpan.TicksPerDay)\n    }\n\n    /**\n     * Gets the hours component of the time interval represented \n     * by the current TimeSpan structure.\n     */\n    get hours() {\n        return Math.floor(this._ticks / TimeSpan.TicksPerHour) % 24\n    }\n\n    /**\n     * Gets the minutes component of the time interval represented \n     * by the current TimeSpan structure.\n     */\n    get minutes() {\n        return Math.floor(this._ticks / TimeSpan.TicksPerMinute) % 60\n    }\n\n    /**\n     * Gets the seconds component of the time interval represented \n     * by the current TimeSpan structure.\n     */\n    get seconds() {\n        return Math.floor(this._ticks / TimeSpan.TicksPerSecond) % 60\n    }\n\n    /**\n     * Gets the milliseconds component of the time interval represented \n     * by the current TimeSpan structure.\n     */\n    get milliseconds() {\n        return Math.floor(this._ticks / TimeSpan.TicksPerMillisecond) % 1000\n    }\n\n    /**\n     * Gets the value of the current TimeSpan structure expressed \n     * in whole and fractional days.\n     */\n    get totalDays() {\n        return this._ticks * TimeSpan.DaysPerTick\n    }\n\n    /**\n     * Gets the value of the current TimeSpan structure expressed \n     * in whole and fractional hours.\n     */\n    get totalHours() {\n        return this._ticks * TimeSpan.HoursPerTick\n    }\n\n    /**\n     * Gets the value of the current TimeSpan structure expressed \n     * in whole and fractional minutes.\n     */\n    get totalMinutes() {\n        return this._ticks * TimeSpan.MinutesPerTick\n    }\n\n    /**\n     * Gets the value of the current TimeSpan structure expressed \n     * in whole and fractional seconds.\n     */\n    get totalSeconds() {\n        return this._ticks * TimeSpan.SecondsPerTick\n    }\n\n    /**\n     * Gets the value of the current TimeSpan structure expressed \n     * in whole and fractional milliseconds\n     */\n    get totalMilliseconds() {\n        const temp = this._ticks * TimeSpan.MillisecondsPerTick;\n        if (temp > TimeSpan.MaxMilliSeconds)\n            return TimeSpan.MaxMilliSeconds;\n\n        if (temp < TimeSpan.MinMilliSeconds)\n            return TimeSpan.MinMilliSeconds;\n\n        return temp;\n    }\n    /**\n     * Initializes a new instance of the TimeSpan to the specified number of ticks\n     * @param ticks A time period expressed in 100-nanosecond units. \n     */\n    constructor(ticks: number)\n    /**\n     * Initializes a new instance of the TimeSpan to a specified \n     * number of hours, minutes, and seconds.\n     * @param hours Number of hours.\n     * @param minutes Number of minutes.\n     * @param seconds Number of seconds.\n     */\n    constructor(hours: number, minutes: number, seconds: number)\n    /**\n     * Initializes a new instance of the TimeSpan to a specified \n     * number of days, hours, minutes, and seconds.\n     * @param days Number of days.\n     * @param hours Number of hours.\n     * @param minutes Number of minutes\n     * @param seconds Number of seconds\n     */\n    constructor(days: number, hours: number, minutes: number, seconds: number)\n    /**\n     * Initializes a new instance of the TimeSpan\n     *  to a specified number of days, hours, minutes, seconds, and milliseconds.\n     * @param days Number of days.\n     * @param hours Number of hours.\n     * @param minutes Number of minutes\n     * @param seconds Number of seconds \n     * @param milliseconds Number of milliseconds\n     */\n    constructor(days: number, hours?: number, minutes?: number, seconds?: number, milliseconds?: number) {\n        if (hours) {\n            const totalMilliSeconds = (days * 3600 * 24 + hours * 3600 + (minutes || 0) * 60 + (seconds || 0)) * 1000 + (milliseconds || 0);\n            if (totalMilliSeconds > TimeSpan.MaxMilliSeconds || totalMilliSeconds < TimeSpan.MinMilliSeconds)\n                throw 'Timespan too long'\n            this._ticks = totalMilliSeconds * TimeSpan.TicksPerMillisecond;\n        } else {\n            const ticks = days\n            this._ticks = ticks\n        }\n    }\n\n    static TimeToTicks(hour: number, minute: number, second: number): number {\n        // totalSeconds is bounded by 2^31 * 2^12 + 2^31 * 2^8 + 2^31,\n        // which is less than 2^44, meaning we won't overflow totalSeconds.\n        const totalSeconds = hour * 3600 + minute * 60 + second;\n        if (totalSeconds > TimeSpan.MaxSeconds || totalSeconds < TimeSpan.MinSeconds)\n            throw \"TimeSpan too long\"\n        return totalSeconds * TimeSpan.TicksPerSecond;\n    }\n    /**\n     * Add two TimeSpans.\n     * @param ts TimeSpan to add to current instance\n     * @returns A new TimeSpan whose value is the sum of the \n     * specified TimeSpan and this instance \n     */\n    public add(ts: TimeSpan): TimeSpan {\n        return this.addTicks(ts._ticks)\n    }\n    \n    /**\n     * Subtracts two TimeSpans.\n     * @param ts TimeSpan to subtract from the current instance\n     * @returns A new TimeSpan whose value is the difference between \n     * the specified TimeSpan and this instance.\n     */\n    public substract(ts: TimeSpan): TimeSpan {\n        return this.addTicks(-ts._ticks);\n    }\n\n    private addTicks(ticks: number): TimeSpan {\n        const result = this._ticks + ticks;\n        // Overflow if signs of operands was identical and result's\n        // sign was opposite.\n        // >> 63 gives the sign bit (either 64 1's or 64 0's).\n        if ((this._ticks >> 63 == ticks >> 63) && (this._ticks >> 63 != result >> 63))\n            throw 'TimeSpan too long'\n        return new TimeSpan(result);\n    }\n\n    /**\n     * Get the current Timespan represent a duration of time.\n     * (Absolute value) \n     * @returns A new TimeSpan whose value is the absolute value of the current TimeSpan.\n     */\n    public duration(): TimeSpan {\n        if (this._ticks == TimeSpan.MinValue._ticks)\n            throw 'Duration too long'\n        return new TimeSpan(Math.abs(this._ticks));\n    }\n\n    /**\n     * Compares this instance to a specified TimeSpan and returns an integer that \n     * indicates whether this instance is shorter than, equal to, or longer than \n     * the specified object or TimeSpan object.\n     * @param  ts \n     * @returns A signed number indicating the relative values of this instance\n     * -1 This instance is shorter than\n     *  1 This instance is greater than\n     *  0 This instance is equal to.\n     */\n    public compareTo(ts: TimeSpan): number {\n        const t = ts._ticks\n        if (this._ticks > t) return 1;\n        if (this._ticks > t) return 1;\n        return 0;\n    }\n\n    /**\n     * Check if two Timespans are equal\n     * @param ts An TimeSpan to compare with this instance.\n     * @returns true if TimeSpan represents the same time interval \n     * as this instance; otherwise false\n     */\n    public equals(ts: TimeSpan): boolean {\n        return this._ticks == ts._ticks\n    }\n\n\n    private static Interval(value: number, scale: number) {\n        const tmp = value * scale;\n        const millis = tmp + (value >= 0 ? 0.5 : -0.5);\n        if ((millis > Number.MAX_VALUE / TimeSpan.TicksPerMillisecond) ||\n            (millis < Number.MIN_VALUE / TimeSpan.TicksPerMillisecond))\n            throw 'TimeSpan too long'\n        return new TimeSpan(millis * TimeSpan.TicksPerMillisecond);\n    }\n}","declare interface Number {\n    pad(length?: number): string\n}\n\nNumber.prototype.pad = function (length?: number) {\n        var s = String(this);\n        while (s.length < (length || 2)) { s = '0' + s; }\n        return s;\n}","/**\n * @module Ama-zing\n */\nexport { default as DateTime} from './datetime'\nexport { default as TimeSpan } from './timespan'\nimport './array';\nimport './number';\n\n\n","/**\n * @module DateTime\n */\nimport TimeSpan from \"./timespan\";\nimport \"./number\"\n\n/**\n * Specifies the day of the week\n */\nexport enum DayOfWeek {\n    Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday\n}\n\n/**\n * @hidden\n */\ninterface IDatePart {\n    year: number\n    month: number\n    day: number\n}\n\n/**\n * Represents an instant in time, typically expressed as a date and time of day.\n */\nexport default class DateTime {\n    // The data is stored as an unsigned 64-bit integeter\n    //   Bits 01-62: The value of 100-nanosecond ticks where 0 represents 1/1/0001 12:00am, up until the value\n    //               12/31/9999 23:59:59.9999999\n    //   Bits 63-64: A four-state value that describes the DateTimeKind value of the date time, with a 2nd\n    //               value for the rare case where the date time is local, but is in an overlapped daylight\n    //               savings time hour and it is in daylight savings time. This allows distinction of these\n    //               otherwise ambiguous local times and prevents data loss when round tripping from Local to\n    //               UTC time.\n    private dateData: number;\n\n    // Number of 100ns ticks per time unit\n    private static readonly TicksPerMillisecond = 10000;\n    private static readonly TicksPerSecond = DateTime.TicksPerMillisecond * 1000;\n    private static readonly TicksPerMinute = DateTime.TicksPerSecond * 60;\n    private static readonly TicksPerHour = DateTime.TicksPerMinute * 60;\n    private static readonly TicksPerDay = DateTime.TicksPerHour * 24;\n\n    // Number of milliseconds per time unit\n    private static readonly MillisPerSecond = 1000;\n    private static readonly MillisPerMinute = DateTime.MillisPerSecond * 60;\n    private static readonly MillisPerHour = DateTime.MillisPerMinute * 60;\n    private static readonly MillisPerDay = DateTime.MillisPerHour * 24;\n\n    // Number of days in a non-leap year\n    private static readonly DaysPerYear = 365;\n    // Number of days in 4 years\n    private static readonly DaysPer4Years = DateTime.DaysPerYear * 4 + 1;       // 1461\n    // Number of days in 100 years\n    private static readonly DaysPer100Years = DateTime.DaysPer4Years * 25 - 1;  // 36524\n    // Number of days in 400 years\n    private static readonly DaysPer400Years = DateTime.DaysPer100Years * 4 + 1; // 146097\n\n    // Number of days from 1/1/0001 to 12/31/1600\n    private static readonly DaysTo1601 = DateTime.DaysPer400Years * 4;          // 584388\n    // Number of days from 1/1/0001 to 12/30/1899\n    private static readonly DaysTo1899 = DateTime.DaysPer400Years * 4 + DateTime.DaysPer100Years * 3 - 367;\n    // Number of days from 1/1/0001 to 12/31/1969\n    private static readonly DaysTo1970 = DateTime.DaysPer400Years * 4 + DateTime.DaysPer100Years * 3 + DateTime.DaysPer4Years * 17 + DateTime.DaysPerYear; // 719,162\n    // Number of days from 1/1/0001 to 12/31/9999\n    private static readonly DaysTo10000 = DateTime.DaysPer400Years * 25 - 366;  // 3652059\n\n    private static readonly MinTicks = 0;\n    private static readonly MaxTicks = DateTime.DaysTo10000 * DateTime.TicksPerDay - 1;\n    private static readonly MaxMillis = DateTime.DaysTo10000 * DateTime.MillisPerDay;\n\n    private static readonly DatePartYear = 0;\n    private static readonly DatePartDayOfYear = 1;\n    private static readonly DatePartMonth = 2;\n    private static readonly DatePartDay = 3;\n\n    private static DaysToMonth365 = [\n        0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];\n    private static DaysToMonth366 = [\n        0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];\n\n    private get internalTicks(): number {\n        return this.dateData;\n    }\n\n    /**\n     * The year part of this DateTime. The value is between 1 and 9999.\n     */\n    public get year(): number {\n        return this.getDatePart(DateTime.DatePartYear);\n    }\n\n    /**\n     * The month part of this DateTime. The value is an integer between 1 and 12.\n     */\n    public get month(): number {\n        return this.getDatePart(DateTime.DatePartMonth);\n    }\n\n    /**\n     * The day-of-month part of this DateTime. The value is between 1 and 31.\n     */\n    public get day(): number {\n        return this.getDatePart(DateTime.DatePartDay);\n    }\n\n    /**\n     * The day-of-year part of this DateTime. The value is between 1 and 366.\n     */\n    public get dayOfYear(): number {\n        return this.getDatePart(DateTime.DatePartDayOfYear);\n    }\n\n    /**\n     * The day-of-week part of this DateTime. The returned value\n     * is an integer between 0 and 6, where 0 indicates Sunday, 1 indicates\n     * Monday, 2 indicates Tuesday, 3 indicates Wednesday, 4 indicates\n     * Thursday, 5 indicates Friday, and 6 indicates Saturday.\n     */\n    public get dayOfWeek(): DayOfWeek {\n        return <DayOfWeek>(Math.floor(this.internalTicks / DateTime.TicksPerDay + 1) % 7);\n    }\n\n    /**\n     * The hour part of this DateTime. The value is between 0 and 23.\n     */\n    public get hour(): number {\n        return (Math.floor(this.internalTicks / DateTime.TicksPerHour) % 24);\n    }\n\n    /**\n     * The minute part of this DateTime. The value is between 0 and 59.\n     */\n    public get minute(): number {\n        return (Math.floor(this.internalTicks / DateTime.TicksPerMinute) % 60);\n    }\n\n    /**\n     * The second part of this DateTime. The value is between 0 and 59.\n     */\n    public get second(): number {\n        return (Math.floor(this.internalTicks / DateTime.TicksPerSecond) % 60);\n    }\n\n    /**\n     * The millisecond part of this DateTime. The value is between 0 and 999.\n     */\n    public get millisecond(): number {\n        return (Math.floor(this.internalTicks / DateTime.TicksPerMillisecond) % 1000);\n    }\n    /**\n     * Returns the tick count for this DateTime. The returned value is\n     * the number of 100-nanosecond intervals that have elapsed since 1/1/0001\n     * 12:00am.\n     */\n    public get ticks(): number {\n        return this.internalTicks\n    }\n\n    /**\n     * Initializes a new instance of the DateTime to the current date and time.\n     */\n    public constructor()\n    /**\n     * Initializes a new instance of the DateTime to a specified number of ticks.\n     * @param ticks A date and time expressed in the number of 100-nanosecond \n     * intervals that have elapsed since January 1, 0001 at 00:00:00.000 in \n     * the Gregorian calendar.\n     */\n    public constructor(ticks: number)\n    public constructor(date: Date)\n    /**\n     * Initializes a new instance of the DateTime to the specified year, month, and day.\n     * @param year The year (1 through 9999).\n     * @param month The month (1 through 12).\n     * @param day The day (1 through the number of days in month).\n     */\n    public constructor(year: number, month: number, day: number)\n    /**\n     * Initializes a new instance of the DateTime to the \n     * specified year, month, day, hour, minute, and second.\n     * @param year The year (1 through 9999).\n     * @param month The month (1 through 12).\n     * @param day The day (1 through the number of days in month).\n     * @param hour The hours (0 through 23).\n     * @param minute The minutes (0 through 59).\n     * @param second The seconds (0 through 59).\n     */\n    public constructor(year: number, month: number, day: number, hour: number, minute: number, second: number)\n    /**\n     * Initializes a new instance of the DateTime to the \n     * specified year, month, day, hour, minute, second, and millisecond.\n     * @param year The year (1 through 9999).\n     * @param month The month (1 through 12).\n     * @param day The day (1 through the number of days in month).\n     * @param hour The hours (0 through 23).\n     * @param minute The minutes (0 through 59).\n     * @param second The seconds (0 through 59).\n     * @param millisecond The milliseconds (0 through 999).\n     */\n    public constructor(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number)\n    public constructor(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number)\n    constructor(year?: number | Date, month?: number, day?: number, hour?: number, minute?: number, second?: number, millisecond?: number) {\n        let ticks = 0\n        if (typeof year === 'number') {\n            if (month && day) {\n                ticks = DateTime.DateToTicks(year, month, day);\n            } else {\n                ticks = year\n            }\n        } else {\n            if(year == null) {\n                year = new Date()\n            }\n            const date = year;\n            year = date.getFullYear();\n            month = date.getMonth() + 1;\n            day = date.getDate();\n            hour = date.getHours()\n            minute = date.getMinutes()\n            second = date.getSeconds()\n            ticks = DateTime.DateToTicks(year, month, day);\n        }\n\n        if (hour && minute && second) {\n            ticks += DateTime.TimeToTicks(hour, minute, second)\n        }\n\n        if (millisecond) {\n            ticks += millisecond * DateTime.TicksPerMillisecond;\n            if (ticks < DateTime.MinTicks || ticks > DateTime.MaxTicks)\n                throw 'Out of DateTime Range'\n        }\n        this.dateData = (ticks);\n    }\n\n    /**\n     * The ticks corresponding to the given year, month, and day.\n     * Will check the if the parameters are valid\n     * @param year The number of years\n     * @param month The number of months\n     * @param day The number of days\n     */\n    private static DateToTicks(year: number, month: number, day: number): number {\n        if (year >= 1 && year <= 9999 && month >= 1 && month <= 12) {\n            const days = DateTime.IsLeapYear(year) ? DateTime.DaysToMonth366 : DateTime.DaysToMonth365;\n            if (day >= 1 && day <= days[month] - days[month - 1]) {\n                const y = year - 1;\n                let n = y * 365 + Math.floor(y / 4) - Math.floor(y / 100) + Math.floor(y / 400) + days[month - 1] + day - 1;\n                let ticks = n * DateTime.TicksPerDay\n                return ticks;\n            }\n        }\n        throw 'Argument Out of range (Year 1-9999 and Month 1-12';\n    }\n\n    // Return the tick count corresponding to the given hour, minute, second.\n    // Will check the if the parameters are valid.\n    private static TimeToTicks(hour: number, minute: number, second: number): number {\n        //TimeSpan.TimeToTicks is a family access function which does no error checking, so\n        //we need to put some error checking out here.\n        if (hour >= 0 && hour < 24 && minute >= 0 && minute < 60 && second >= 0 && second < 60) {\n            return (TimeSpan.TimeToTicks(hour, minute, second));\n        }\n        throw 'Argument Out of range (BadHourMinuteSecond)'\n    }\n\n    /**\n     * Whether a given year is a leap year\n     * @param year A year to check\n     */\n    public static IsLeapYear(year: number): boolean {\n        if (year < 1 || year > 9999) {\n            throw 'Year is out of range'\n        }\n        return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n    }\n\n    /**\n     * The number of days in the month\n     * @param year The year of the month\n     * @param month The month we want to know the days of.\n     */\n    public static DaysInMonth(year: number, month: number): number {\n        if (month < 1 || month > 12) throw 'Month Out of range 1 - 12'\n        // IsLeapYear checks the year argument\n        const days = DateTime.IsLeapYear(year) ? DateTime.DaysToMonth366 : DateTime.DaysToMonth365;\n        return days[month] - days[month - 1];\n    }\n\n    /**\n     * Add the fractional number of time units to this DateTime\n     * @param value The value to add to the DateTime. ie 1,2,3,4\n     * @param scale The scale of the value. ie DateTime.MillisPerDay\n     */\n    private add(value: number, scale: number): DateTime {\n        let millis = (value * scale);\n        if (millis <= -DateTime.MaxMillis || millis >= DateTime.MaxMillis)\n            throw 'Out of Range '\n        return this.addTicks(millis * DateTime.TicksPerMillisecond);\n    }\n\n    /**\n     * Add the given number of 100-nanosecond ticks to this DateTime. The value argument\n     * is permitted to be negative.\n     * @param value the number of ticks to add.\n     */\n    public addTicks(value: number): DateTime {\n        let ticks = this.internalTicks;\n        if (value > DateTime.MaxTicks - ticks || value < DateTime.MinTicks - ticks) {\n            throw 'New DateTime Out of Range'\n            // throw new ArgumentOutOfRangeException('value', Environment.GetResourceString('ArgumentOutOfRange_DateArithmetic'));\n        }\n        return new DateTime((ticks + value));\n    }\n\n    /**\n     * Adds a fractional number of\n     * days to this DateTime. The result is computed by rounding the\n     * fractional number of days given by value to the nearest\n     * millisecond, and adding that interval to this DateTime. The\n     * value argument is permitted to be negative.\n     * @param value The number of days to add.\n     */\n    public addDays(value: number): DateTime {\n        return this.add(value, DateTime.MillisPerDay);\n    }\n\n    /**\n     * Add a fractional number of hours to this DateTime. \n     * The result is computed by rounding the\n     * fractional number of hours given by value to the nearest\n     * millisecond, and adding that interval to this DateTime. The\n     * value argument is permitted to be negative.\n     * @param value The number of hours to add.\n     */\n    public addHours(value: number): DateTime {\n        return this.add(value, DateTime.MillisPerHour);\n    }\n\n    /**\n     * Add a given number of milliseconds to this DateTime. \n     * The result is computed by rounding the number of milliseconds \n     * given by value to the nearest integer, and adding that interval \n     * to this DateTime. The value argument is permitted to be negative.\n     * @param value The number of milliseconds to add.\n     */\n    public addMilliseconds(value: number): DateTime {\n        return this.add(value, 1);\n    }\n\n    /**\n     * Add a fractional number of minutes to this DateTime. \n     * The result is computed by rounding the\n     * fractional number of minutes given by value to the nearest\n     * millisecond, and adding that interval to this DateTime. The\n     * value argument is permitted to be negative.\n     * @param value The number of fractional minutes to add.\n     */\n    public addMinutes(value: number): DateTime {\n        return this.add(value, DateTime.MillisPerMinute);\n    }\n\n    /**\n     * Adds a fractional number of seconds to this DateTime. \n     * The result is computed by rounding the\n     * fractional number of seconds given by value to the nearest\n     * millisecond, and adding that interval to this DateTime. The\n     * value argument is permitted to be negative.\n     * @param value \n     */\n    public addSeconds(value: number): DateTime {\n        return this.add(value, DateTime.MillisPerSecond);\n    }\n\n    /**\n     * Adds the given number of months to this DateTime. \n     * The result is computed by incrementing\n     * (or decrementing) the year and month parts of this DateTime by\n     * months, and, if required, adjusting the day part of the\n     * resulting date downwards to the last day of the resulting month in the\n     * resulting year. The time-of-day part of the result is the same as the\n     * time-of-day part of this DateTime.\n     * \n     * In more precise terms, considering this DateTime to be of the\n     * form y / m / d + t, where y is the\n     * year, m is the month, d is the day, and t is the\n     * time-of-day, the result is y1 / m1 / d1 + t,\n     * where y1 and m1 are computed by adding months months\n     * to y and m, and d1 is the largest value less than\n     * or equal to d that denotes a valid day in month m1 of year\n     * y1.\n     * \n     * @param months The number of months to add.\n     */\n    public addMonths(months: number): DateTime {\n        if (months < -120000 || months > 120000)\n            throw 'Months - Out of Range'\n\n        let y: number, m: number, d: number;\n        const datePart = this.getAllDatePart()\n        y = datePart.year\n        m = datePart.month\n        d = datePart.day\n\n        const i = m - 1 + months;\n        if (i >= 0) {\n            m = i % 12 + 1;\n            y = y + i / 12;\n        }\n        else {\n            m = 12 + (i + 1) % 12;\n            y = y + (i - 11) / 12;\n        }\n        if (y < 1 || y > 9999) {\n            throw 'New DateTime Out of Range'\n        }\n        const days = DateTime.DaysInMonth(y, m);\n        if (d > days) d = days;\n        return new DateTime(DateTime.DateToTicks(y, m, d + this.internalTicks % DateTime.TicksPerDay));\n    }\n\n    /**\n     * Add the given number of years to this DateTime. \n     * The result is computed by incrementing\n     * (or decrementing) the year part of this DateTime by value\n     * years. If the month and day of this DateTime is 2/29, and if the\n     * resulting year is not a leap year, the month and day of the resulting\n     * DateTime becomes 2/28. Otherwise, the month, day, and time-of-day\n     * parts of the result are the same as those of this DateTime.\n     * @param value The number of years to add.\n     */\n    public addYears(value: number): DateTime {\n        if (value < -10000 || value > 10000) throw 'Years Out of Range'\n        return this.addMonths(value * 12);\n    }\n\n    private getDatePart(part: number) {\n        return DateTime.GetDatePart(part, this.internalTicks);\n    }\n\n    // Returns a given date part of this DateTime. This method is used\n    // to compute the year, day-of-year, month, or day part.\n    private static GetDatePart(part: number, ticks: number): number {\n        // let ticks = this.internalTicks;\n        // n = number of days since 1/1/0001\n        let n = Math.floor(ticks / DateTime.TicksPerDay);\n        // y400 = number of whole 400-year periods since 1/1/0001\n        let y400 = Math.floor(n / DateTime.DaysPer400Years);\n        // n = day number within 400-year period\n        n -= y400 * DateTime.DaysPer400Years;\n        // y100 = number of whole 100-year periods within 400-year period\n        let y100 = Math.floor(n / DateTime.DaysPer100Years);\n        // Last 100-year period has an extra day, so decrement result if 4\n        if (y100 == 4) y100 = 3;\n        // n = day number within 100-year period\n        n -= y100 * DateTime.DaysPer100Years;\n        // y4 = number of whole 4-year periods within 100-year period\n        let y4 = Math.floor(n / DateTime.DaysPer4Years);\n        // n = day number within 4-year period\n        n -= y4 * DateTime.DaysPer4Years;\n        // y1 = number of whole years within 4-year period\n        let y1 = Math.floor(n / DateTime.DaysPerYear);\n        // Last year has an extra day, so decrement result if 4\n        if (y1 == 4) y1 = 3;\n        // If year was requested, compute and return it\n        if (part == DateTime.DatePartYear) {\n            return y400 * 400 + y100 * 100 + y4 * 4 + y1 + 1;\n        }\n        // n = day number within year\n        n -= y1 * DateTime.DaysPerYear;\n        // If day-of-year was requested, return it\n        if (part == DateTime.DatePartDayOfYear) return n + 1;\n        // Leap year calculation looks different from IsLeapYear since y1, y4,\n        // and y100 are relative to year 1, not year 0\n        let leapYear = y1 == 3 && (y4 != 24 || y100 == 3);\n        let days = leapYear ? DateTime.DaysToMonth366 : DateTime.DaysToMonth365;\n        // All months have less than 32 days, so n >> 5 is a good conservative\n        // estimate for the month\n        let m = n >> 5 + 1;\n        // m = 1-based month number\n        while (n >= days[m]) m++;\n        // If month was requested, return it\n        if (part == DateTime.DatePartMonth) return m;\n        // Return 1-based day-of-month\n        return n - days[m - 1] + 1;\n    }\n\n    // Exactly the same as GetDatePart(int part), except computing all of\n    // year/month/day rather than just one of them.  Used when all three\n    // are needed rather than redoing the computations for each.\n    private getAllDatePart(): IDatePart {\n        let ticks = this.internalTicks;\n        // n = number of days since 1/1/0001\n        let n = Math.floor(ticks / DateTime.TicksPerDay);\n        // y400 = number of whole 400-year periods since 1/1/0001\n        let y400 = Math.floor(n / DateTime.DaysPer400Years);\n        // n = day number within 400-year period\n        n -= Math.floor(y400 * DateTime.DaysPer400Years);\n        // y100 = number of whole 100-year periods within 400-year period\n        let y100 = Math.floor(n / DateTime.DaysPer100Years);\n        // Last 100-year period has an extra day, so decrement result if 4\n        if (y100 == 4) y100 = 3;\n        // n = day number within 100-year period\n        n -= Math.floor(y100 * DateTime.DaysPer100Years);\n        // y4 = number of whole 4-year periods within 100-year period\n        let y4 = Math.floor(n / DateTime.DaysPer4Years);\n        // n = day number within 4-year period\n        n -= Math.floor(y4 * DateTime.DaysPer4Years);\n        // y1 = number of whole years within 4-year period\n        let y1 = Math.floor(n / DateTime.DaysPerYear);\n        // Last year has an extra day, so decrement result if 4\n        if (y1 == 4) y1 = 3;\n        // compute year\n        let year = Math.floor(y400 * 400 + y100 * 100 + y4 * 4 + y1 + 1);\n        // n = day number within year\n        n -= Math.floor(y1 * DateTime.DaysPerYear);\n        // dayOfYear = n + 1;\n        // Leap year calculation looks different from IsLeapYear since y1, y4,\n        // and y100 are relative to year 1, not year 0\n        let leapYear = y1 == 3 && (y4 != 24 || y100 == 3);\n        let days = leapYear ? DateTime.DaysToMonth366 : DateTime.DaysToMonth365;\n        // All months have less than 32 days, so n >> 5 is a good conservative\n        // estimate for the month\n        let m = (n >> 5) + 1;\n        // m = 1-based month number\n        while (n >= days[m]) m++;\n        // compute month and day\n        let month = m;\n        let day = n - days[m - 1] + 1;\n        return { year, month, day }\n    }\n    /**\n     * Checks whether a DateTime or Date is equal to current instance.\n     * @param value The object to compare to this instance.\n     * @return true if the value parameter equals the value of \n     * this instance; otherwise, false.\n     */\n    public equals(value: DateTime | Date): boolean {\n        if (value instanceof Date) {\n            value = new DateTime(value);\n        }\n        return this.internalTicks == value.internalTicks;\n    }\n    /**\n     * Compares two DateTimes.\n     * @param value The DateTime to compare to the current instance.\n     * @returns A signed number indicating the relative values of this\n     * instance and the value parameter.\n     * | Value | Description                         |\n     * | -1    | This instance is earlier than value |\n     * |  0    | This instance is same as value      |\n     * |  1    | This instance is greater than value | \n     */\n    public compareTo(value: DateTime): number {\n        const valueTicks = value.internalTicks;\n        const ticks = this.internalTicks;\n        if (ticks > valueTicks) return 1;\n        if (ticks < valueTicks) return -1;\n        return 0;\n    }\n\n    /**\n     * Subtracts two DateTimes.\n     * @param value The date and time value to subtract.\n     * @returns A time interval that is equal to the date and time \n     * represented by this instance minus the date and time of the value.\n     */\n    public subtract(value: DateTime): TimeSpan {\n        return new TimeSpan(this.internalTicks - value.internalTicks);\n    }\n    /**\n     * Subtracts the specified duration from this instance\n     * @param value The time interval to subtract.\n     * @returns An object that is equal to the date and time \n     * represented by this instance minus the time interval represented by\n     */\n    public subtractTime(value: TimeSpan): DateTime {\n        const ticks = this.internalTicks;\n        const valueTicks = value.ticks;\n        if (ticks - DateTime.MinTicks < valueTicks || ticks - DateTime.MaxTicks > valueTicks) {\n            throw 'DateTime out of range'\n        }\n        return new DateTime((ticks - valueTicks));\n    }\n\n    private static formatChars = ['h', 'H', 'M', 'm', 't', 's', 'y', 'd', '*']\n\n    private weekdayName(day: DayOfWeek, abbrev: boolean = false): string {\n        switch (day) {\n            case DayOfWeek.Monday:\n                return abbrev ? 'Mon' : 'Monday'\n            case DayOfWeek.Tuesday:\n                return abbrev ? 'Tue' : 'Tuesday'\n            case DayOfWeek.Wednesday:\n                return abbrev ? 'Wed' : 'Wednesday'\n            case DayOfWeek.Thursday:\n                return abbrev ? 'Thu' : 'Thursday'\n            case DayOfWeek.Friday:\n                return abbrev ? 'Fri' : 'Friday'\n            case DayOfWeek.Saturday:\n                return abbrev ? 'Sat' : 'Saturday'\n            case DayOfWeek.Sunday:\n                return abbrev ? 'Sun' : 'Sunday'\n        }\n    }\n\n    private monthName(month: number, abbrev: boolean = false): string {\n        switch (month) {\n            case 1:\n                return abbrev ? 'Jan' : 'January'\n            case 2:\n                return abbrev ? 'Feb' : 'February'\n            case 3:\n                return abbrev ? 'Mar' : 'March'\n            case 4:\n                return abbrev ? 'Apr' : 'April'\n            case 5:\n                return abbrev ? 'May' : 'May'\n            case 6:\n                return abbrev ? 'Jun' : 'June'\n            case 7:\n                return abbrev ? 'Jul' : 'July'\n            case 8:\n                return abbrev ? 'Aug' : 'August'\n            case 9:\n                return abbrev ? 'Sep' : 'September'\n            case 10:\n                return abbrev ? 'Oct' : 'October'\n            case 11:\n                return abbrev ? 'Nov' : 'November'\n            case 12:\n                return abbrev ? 'Dec' : 'December'\n        }\n        return ''\n    }\n\n    private string(format: string): string {\n        const hour24 = this.hour\n        const hour12 = hour24 % 12\n\n        let designator = 'AM'\n        if (hour24 >= 12) {\n            designator = 'PM'\n        }\n        const minute = this.minute\n        const second = this.second\n        const year = this.year\n        const month = this.month\n        const day = this.day\n        const dayOfWeek = this.dayOfWeek\n        switch (format) {\n            case 'HH*':\n            case 'HH':\n            case 'hh*':\n            case 'hh':\n                return hour12.pad()\n            case 'H':\n            case 'h':\n                return String(hour24)\n            case 'tt*':\n            case 'tt':\n                return designator\n            case 't':\n                return designator[0]\n            case 'MMMM*':\n            case 'MMMM':\n                return this.monthName(month)\n            case 'MMM':\n                return this.monthName(month, true)\n            case 'MM':\n                return month.pad()\n            case 'M':\n                return  String(month)\n            case 'dddd*':\n            case 'dddd':\n                return this.weekdayName(dayOfWeek)\n            case 'ddd':\n                return this.weekdayName(dayOfWeek, true)\n            case 'dd':\n                return day.pad()\n            case 'd':\n                return String(day)\n            case 'mm*':\n            case 'mm':\n                return minute.pad()\n            case 'm':\n                return String(minute)\n            case 'ss*':\n            case 'ss':\n                return second.pad()\n            case 's':\n                return String(second)\n            default:\n                if (format.indexOf('y') != -1) {\n                    return year.pad(format.length)\n                }\n                return '';\n        }\n    }\n\n    /**\n     * Turns DateTime into a string with the specified format.\n     * \n     * | Patterns        | Format  | Description                                     | Example |\n     * | --------------- | ------- | ------------------------------------------------| ------- |\n     * | h               | 0       | 12 hour w/o leading zero                        | 3       |\n     * | hh              | 00      | 12 hour with leading zero                       | 03      |\n     * | hh*             | 00      | 12 hour with leading zero                       | 03      |\n     * | H               | 0       | 24 hour w/o leading zero                        | 8       |\n     * | HH              | 00      | 24 hour with leading zero                       | 08      |\n     * | HH*             | 00      | 24 hour with leading zero                       | 08      |\n     * | m               | 0       | minute  w/o leading zero                        | 1       |\n     * | mm              | 00      | minute  with leading zero                       | 01      |\n     * | mm*             | 00      | minute  with leading zero                       | 01      |\n     * | s               | 0       | second  w/o leading zero                        | 5       |\n     * | ss              | 00      | second  with leading zero                       | 05      |\n     * | ss*             | 00      | second  with leading zero                       | 05      |\n     * | t               | -       | first character of AM/PM designator             | A/P     |\n     * | tt              | -       | AM/PM designator                                | AM/PM   |\n     * | tt*             | -       | AM/PM designator                                | AM/PM   |\n     * | d               | 0       | day w/o leading zero                            | 1       |\n     * | dd              | 00      | day with leading zero                           | 01      |\n     * | ddd             | -       | short weekday name (abbreviation)               | Mon     |\n     * | dddd            | -       | full weekday name                               | Monday  |\n     * | dddd*           | -       | full weekday name                               | Monday  |\n     * | M               | 0       | month w/o leading zero                          | 2       |\n     * | MM              | 00      | month with leading zero                         | 02      |\n     * | MMM             | -       | short month name (abbreviation)                 | Feb     |\n     * | MMMM            | -       | full month name                                 | February|\n     * | MMMM*           | -       | full month name                                 | February|\n     * | y               | 0       | two digit year (year % 100) w/o leading zero    | 1       |\n     * | yy              | 00      | two digit year (year % 100) with leading zero   | 01      |\n     * | yyyy            | 0000    | full year                                       | 2019    |\n     * | yyyy*           | 0000    | full year                                       | 2019    |\n     * | '...'           | -       | quoted string, ignore matching values           | 'ABC'   |\n     * \n     *\n     * @param format The format you would like the string in\n     */\n    toString(format: string = 'yyyy-MM-ddTHH:mm:ss'): string {\n        let final = ''\n        let current = ''\n        while (format.length > 0) {\n            current += format.slice(0, 1)\n            const next = format.slice(1, 2)\n            if(current == \"'\") {\n                const endQuotePos = format.indexOf(\"'\",2);\n                final += format.slice(1,endQuotePos)\n                format = format.slice(endQuotePos+1)\n                current =''\n                continue;\n            }\n            if (DateTime.formatChars.filter(f => current.indexOf(f) != -1).length == 0) {\n                final += current\n                current = ''\n                format = format.slice(1)\n                continue;\n            }\n            if (DateTime.formatChars.filter(f => current.indexOf(f) != -1).length > 0 &&\n                DateTime.formatChars.filter(f => f == next).length == 0) {\n                // console.log('Found-------------', current);\n                final += this.string(current);\n                current = ''\n            }\n            format = format.slice(1)\n        }\n        return final;\n\n    }\n\n    /**\n     * DateTime as Javascript Date\n     * @returns A Javascript Date object that represent this DateTime instance.\n     */\n    public toDate(): Date {\n        return new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond)\n    }\n\n    /**\n     * @hidden\n     */\n    [Symbol.toPrimitive](hint: string): string | number {\n        if (hint == 'number') {\n            return this.ticks;\n        }\n        \n        return this.toString();\n    }\n}","interface Array<T> {\n    groupBy(key: string): { [key: string]: [T] }\n}\n\nArray.prototype.groupBy = function<T extends any>(this: Array<T>, key: string): { [key: string]: [T] } {\n    return this.reduce<{ [key: string]: [T] }>((prev, x) => {\n        let existing = prev[x[key]]\n        if (existing == null) {\n            prev[x[key]] = [x]\n        } else {\n            existing.push(x)\n        }\n        return prev\n    }, {})\n};"],"sourceRoot":""}